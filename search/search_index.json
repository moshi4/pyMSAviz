{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyMSAviz","text":""},{"location":"#overview","title":"Overview","text":"<p>pyMSAviz is a MSA(Multiple Sequence Alignment) visualization python package for sequence analysis implemented based on matplotlib. This package is developed for the purpose of easily and beautifully plotting MSA in Python. It also implements the functionality to add markers, text annotations, highlights to specific positions and ranges in MSA. pyMSAviz was developed inspired by Jalview and ggmsa.</p> <p> </p> Fig.1 Simple visualization result <p> </p> Fig.2 Customized visualization result"},{"location":"#installation","title":"Installation","text":"<p><code>Python 3.9 or later</code> is required for installation.</p> <p>Install PyPI package:</p> <pre><code>pip install pymsaviz\n</code></pre> <p>Install bioconda package:</p> <pre><code>conda install -c conda-forge -c bioconda pymsaviz\n</code></pre>"},{"location":"color_schemes/","title":"Color Schemes","text":"<p>Color schemes equivalent to Jalview are available in pyMSAviz.</p> In\u00a0[1]: Copied! <pre>from pymsaviz import MsaViz\n\nprint(MsaViz.available_color_schemes())\n</pre> from pymsaviz import MsaViz  print(MsaViz.available_color_schemes()) <pre>['Clustal', 'Zappo', 'Taylor', 'Flower', 'Blossom', 'Sunset', 'Ocean', 'Hydrophobicity', 'HelixPropensity', 'StrandPropensity', 'TurnPropensity', 'BuriedIndex', 'Nucleotide', 'Purine/Pyrimidine', 'Identity', 'None']\n</pre> In\u00a0[2]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nfor color_scheme in MsaViz.available_color_schemes():\n    mv = MsaViz(msa_file, start=100, end=160, color_scheme=color_scheme, show_label=False)\n    fig = mv.plotfig()\n    fig.suptitle(f\"Color Scheme = {color_scheme}\", x=0.5, y=1.15, va=\"bottom\", size=15)\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") for color_scheme in MsaViz.available_color_schemes():     mv = MsaViz(msa_file, start=100, end=160, color_scheme=color_scheme, show_label=False)     fig = mv.plotfig()     fig.suptitle(f\"Color Scheme = {color_scheme}\", x=0.5, y=1.15, va=\"bottom\", size=15)"},{"location":"color_schemes/#color-schemes","title":"Color Schemes\u00b6","text":""},{"location":"color_schemes/#available-color-schemes","title":"Available Color Schemes\u00b6","text":""},{"location":"color_schemes/#example-of-color-scheme","title":"Example of Color Scheme\u00b6","text":""},{"location":"getting_started/","title":"Getting Started","text":"In\u00a0[1]: Copied! <pre># %pip install pymsaviz\n</pre> # %pip install pymsaviz  <ul> <li>Create <code>MsaViz</code> class instance from MSA file</li> <li>Plot figure by <code>plotfig</code> method</li> </ul> In\u00a0[2]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"HIGD2A.fa\")\nmv = MsaViz(msa_file)\nfig = mv.plotfig()  # If save figure, use savefig method [e.g. mv.savefig(\"result.png\")]\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"HIGD2A.fa\") mv = MsaViz(msa_file) fig = mv.plotfig()  # If save figure, use savefig method [e.g. mv.savefig(\"result.png\")] <ul> <li>Wrap style MSA visualization (<code>wrap_length=60</code>)</li> <li>Change color scheme (<code>color_scheme='Flower'</code>)</li> </ul> In\u00a0[3]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"HIGD2A.fa\")\nmv = MsaViz(msa_file, wrap_length=60, color_scheme=\"Flower\", show_count=True)\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"HIGD2A.fa\") mv = MsaViz(msa_file, wrap_length=60, color_scheme=\"Flower\", show_count=True) fig = mv.plotfig() <ul> <li>Show grid (<code>show_grid=True</code>)</li> <li>Show consensus sequence &amp; identity bar (<code>show_consensus=True</code>)</li> </ul> In\u00a0[4]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, wrap_length=60, show_grid=True, show_consensus=True)\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, wrap_length=60, show_grid=True, show_consensus=True) fig = mv.plotfig() <ul> <li>Limit MSA visualization start-end range (<code>start=100, end=160</code>)</li> <li>No display MSA characters (<code>show_seq_char=False</code>)</li> </ul> In\u00a0[5]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, start=100, end=160, show_seq_char=False, show_consensus=True, consensus_color=\"tomato\")\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, start=100, end=160, show_seq_char=False, show_consensus=True, consensus_color=\"tomato\") fig = mv.plotfig() <ul> <li>Set user-defined custom color scheme by <code>set_custom_color_scheme</code> method</li> </ul> In\u00a0[6]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, start=100, end=160)\nmv.set_custom_color_scheme({\"A\": \"red\", \"P\": \"skyblue\", \"C\": \"lime\", \"H\": \"orange\", \"L\": \"pink\"})\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, start=100, end=160) mv.set_custom_color_scheme({\"A\": \"red\", \"P\": \"skyblue\", \"C\": \"lime\", \"H\": \"orange\", \"L\": \"pink\"}) fig = mv.plotfig() <ul> <li>Set user-defined custom color handle function by <code>set_custom_color_func</code> method</li> </ul> In\u00a0[7]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\nfrom Bio.Align import MultipleSeqAlignment\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, start=100, end=160, show_grid=True)\n\ndef custom_color_func(\n    row_pos: int, col_pos: int, seq_char: str, msa: MultipleSeqAlignment\n):\n    # Note: Both `row_pos` and `col_pos` are 0-index starts\n    if col_pos &lt; 115 and seq_char != \"-\":\n        return \"salmon\"\n    if 115 &lt;= col_pos &lt; 130:\n        if seq_char in (\"A\", \"V\", \"P\"):\n            return \"skyblue\"\n        else:\n            return \"lightyellow\"\n    if 130 &lt;= col_pos &lt; 145:\n        if 1 &lt;= row_pos &lt;= 4:\n            return \"lime\"\n        else:\n            return \"white\"\n    # Use default color setting in other column (145 &lt;= col_pos &lt; 160)\n    return None\n\nmv.set_custom_color_func(custom_color_func)\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata from Bio.Align import MultipleSeqAlignment  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, start=100, end=160, show_grid=True)  def custom_color_func(     row_pos: int, col_pos: int, seq_char: str, msa: MultipleSeqAlignment ):     # Note: Both `row_pos` and `col_pos` are 0-index starts     if col_pos &lt; 115 and seq_char != \"-\":         return \"salmon\"     if 115 &lt;= col_pos &lt; 130:         if seq_char in (\"A\", \"V\", \"P\"):             return \"skyblue\"         else:             return \"lightyellow\"     if 130 &lt;= col_pos &lt; 145:         if 1 &lt;= row_pos &lt;= 4:             return \"lime\"         else:             return \"white\"     # Use default color setting in other column (145 &lt;= col_pos &lt; 160)     return None  mv.set_custom_color_func(custom_color_func) fig = mv.plotfig() <ul> <li>Set user-defined highlight position by <code>set_highlight_pos</code> method</li> </ul> In\u00a0[8]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, wrap_length=60)\nmv.set_highlight_pos([10, 20, 30, (40, 120), (150, 200), 220, 270])\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, wrap_length=60) mv.set_highlight_pos([10, 20, 30, (40, 120), (150, 200), 220, 270]) fig = mv.plotfig() <ul> <li>Set highlight position by consensus identity threshold using <code>set_highlight_pos_by_identity_thr</code> method</li> </ul> In\u00a0[9]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, start=100, end=160, show_consensus=True)\n# Only highlight 0 - 80 [%] consensus identity positions\nmv.set_highlight_pos_by_ident_thr(min_thr=0, max_thr=80)\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, start=100, end=160, show_consensus=True) # Only highlight 0 - 80 [%] consensus identity positions mv.set_highlight_pos_by_ident_thr(min_thr=0, max_thr=80) fig = mv.plotfig() <ul> <li>Add markers by <code>add_markers</code> method</li> <li>Add text annotation by <code>add_text_annotation</code> method</li> </ul> In\u00a0[10]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, start=1, end=180, wrap_length=60, show_consensus=True)\n\n# Extract MSA positions less than 50% consensus identity\npos_ident_less_than_50 = []\nident_list = mv._get_consensus_identity_list()\nfor pos, ident in enumerate(ident_list, 1):\n    if ident &lt;= 50:\n        pos_ident_less_than_50.append(pos)\n\n# Add markers\nmv.add_markers([1])\nmv.add_markers([10, 20], color=\"orange\", marker=\"o\")\nmv.add_markers([30, (40, 50), 55], color=\"green\", marker=\"+\")\nmv.add_markers(pos_ident_less_than_50, marker=\"x\", color=\"blue\")\n# Add text annotations\nmv.add_text_annotation((76, 102), \"Gap Region\", text_color=\"red\", range_color=\"red\")\nmv.add_text_annotation((112, 123), \"Gap Region\", text_color=\"green\", range_color=\"green\")\n\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, start=1, end=180, wrap_length=60, show_consensus=True)  # Extract MSA positions less than 50% consensus identity pos_ident_less_than_50 = [] ident_list = mv._get_consensus_identity_list() for pos, ident in enumerate(ident_list, 1):     if ident &lt;= 50:         pos_ident_less_than_50.append(pos)  # Add markers mv.add_markers([1]) mv.add_markers([10, 20], color=\"orange\", marker=\"o\") mv.add_markers([30, (40, 50), 55], color=\"green\", marker=\"+\") mv.add_markers(pos_ident_less_than_50, marker=\"x\", color=\"blue\") # Add text annotations mv.add_text_annotation((76, 102), \"Gap Region\", text_color=\"red\", range_color=\"red\") mv.add_text_annotation((112, 123), \"Gap Region\", text_color=\"green\", range_color=\"green\")  fig = mv.plotfig() <ul> <li>Marker list (https://matplotlib.org/stable/api/markers_api.html)</li> </ul> In\u00a0[11]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, end=60, show_grid=True)\n\n# Add various type markers\nmarkers = [\".\", \",\", \"o\", \"v\", \"^\", \"&lt;\", \"&gt;\", \"1\", \"2\", \"3\", \"4\", \"8\", \"s\", \"p\", \"*\", \"h\", \"H\", \"+\", \"x\", \"D\", \"d\", \"|\", \"_\"]\ncolors = [\"red\", \"blue\", \"green\", \"chocolate\", \"magenta\"]\nfor idx, marker in enumerate(markers, 1):\n    color = colors[idx % len(colors)]\n    mv.add_markers([idx * 2], marker=marker, color=color, size=8)\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, end=60, show_grid=True)  # Add various type markers markers = [\".\", \",\", \"o\", \"v\", \"^\", \"&lt;\", \"&gt;\", \"1\", \"2\", \"3\", \"4\", \"8\", \"s\", \"p\", \"*\", \"h\", \"H\", \"+\", \"x\", \"D\", \"d\", \"|\", \"_\"] colors = [\"red\", \"blue\", \"green\", \"chocolate\", \"magenta\"] for idx, marker in enumerate(markers, 1):     color = colors[idx % len(colors)]     mv.add_markers([idx * 2], marker=marker, color=color, size=8) fig = mv.plotfig() <p>Change detail plot parameters by <code>set_plot_params</code> method</p> <ul> <li><code>ticks_interval=5</code> (Default: 10)</li> <li><code>x_unit_size=0.20</code> (Default: 0.14)</li> <li><code>grid_color=\"black\"</code> (Default: \"lightgrey\")</li> <li><code>identity_color=\"tomato\"</code> (Default: \"#A3A5FF\")</li> </ul> In\u00a0[12]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, start=100 ,end=140, show_grid=True, show_count=True, color_scheme=\"Identity\")\nmv.set_plot_params(ticks_interval=5, x_unit_size=0.20, grid_color=\"black\", identity_color=\"tomato\")\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, start=100 ,end=140, show_grid=True, show_count=True, color_scheme=\"Identity\") mv.set_plot_params(ticks_interval=5, x_unit_size=0.20, grid_color=\"black\", identity_color=\"tomato\") fig = mv.plotfig() <p>Color block MSA display</p> In\u00a0[13]: Copied! <pre>from pymsaviz import MsaViz, get_msa_testdata\n\nmsa_file = get_msa_testdata(\"MRGPRG.fa\")\nmv = MsaViz(msa_file, color_scheme=\"Clustal\", show_seq_char=False, show_count=True, sort=True, show_consensus=True, consensus_color=\"grey\")\nmv.set_plot_params(ticks_interval=50, x_unit_size=0.04, show_consensus_char=False)\nfig = mv.plotfig()\n</pre> from pymsaviz import MsaViz, get_msa_testdata  msa_file = get_msa_testdata(\"MRGPRG.fa\") mv = MsaViz(msa_file, color_scheme=\"Clustal\", show_seq_char=False, show_count=True, sort=True, show_consensus=True, consensus_color=\"grey\") mv.set_plot_params(ticks_interval=50, x_unit_size=0.04, show_consensus_char=False) fig = mv.plotfig()"},{"location":"getting_started/#1-simple-visualization","title":"1. Simple Visualization\u00b6","text":""},{"location":"getting_started/#2-customized-visualization","title":"2. Customized Visualization\u00b6","text":""},{"location":"api-docs/msaviz/","title":"MsaViz Class","text":""},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz","title":"MsaViz","text":"<pre><code>MsaViz(\n    msa: str | Path | MSA,\n    *,\n    format: str = \"fasta\",\n    color_scheme: str | None = None,\n    start: int = 1,\n    end: int | None = None,\n    wrap_length: int | None = None,\n    wrap_space_size: float = 3.0,\n    show_label: bool = True,\n    label_type: str = \"id\",\n    show_seq_char: bool = True,\n    show_grid: bool = False,\n    show_count: bool = False,\n    show_consensus: bool = False,\n    consensus_color: str = \"#1f77b4\",\n    consensus_size: float = 2.0,\n    sort: bool = False\n)\n</code></pre> <p>Multiple Sequence Alignment Visualization</p> PARAMETER DESCRIPTION <code>msa</code> <p>MSA file, URL MSA file, MSA object</p> <p> TYPE: <code>str | Path | MultipleSeqAlignment</code> </p> <code>format</code> <p>Alignment file format (e.g. <code>fasta</code>, <code>phylip</code>, <code>clustal</code>, <code>emboss</code>, etc...)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'fasta'</code> </p> <code>color_scheme</code> <p>Color scheme. If None, <code>Zappo</code>(AA) or <code>Nucleotide</code>(NT) is set. [<code>Clustal</code>|<code>Zappo</code>|<code>Taylor</code>|<code>Flower</code>|<code>Blossom</code>|<code>Sunset</code>|<code>Ocean</code>| <code>Hydrophobicity</code>|<code>HelixPropensity</code>|<code>StrandPropensity</code>|<code>TurnPropensity</code>| <code>BuriedIndex</code>|<code>Nucleotide</code>|<code>Purine/Pyrimidine</code>|<code>Identity</code>|<code>None</code>]</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>start</code> <p>Start position of visualization (one-based coordinates)</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>end</code> <p>End position of visualization (one-based coordinates)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>wrap_length</code> <p>Wrap sequence length. If None, no wrapping sequence.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>wrap_space_size</code> <p>Space size between wrap MSA plot area</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>show_label</code> <p>If True, show label</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>label_type</code> <p>Label type (<code>id</code>|<code>description</code>) to be shown when show_label=True. If <code>label_type=\"id\"</code>, show omitted id label. If <code>label_type=\"description\"</code>, show full description label.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'id'</code> </p> <code>show_seq_char</code> <p>If True, show sequence character</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_grid</code> <p>If True, show grid</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_count</code> <p>If True, show seq char count without gap on right side</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_consensus</code> <p>If True, show consensus sequence</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>consensus_color</code> <p>Consensus identity bar color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'#1f77b4'</code> </p> <code>consensus_size</code> <p>Consensus identity bar height size</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>sort</code> <p>Sort MSA order by NJ tree constructed from MSA distance matrix</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.available_color_schemes","title":"available_color_schemes  <code>staticmethod</code>","text":"<pre><code>available_color_schemes() -&gt; list[str]\n</code></pre> <p>Get available color schemes</p> RETURNS DESCRIPTION <code>color_scheme_names</code> <p>Available color schemes</p> <p> TYPE: <code>list[str]</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.set_plot_params","title":"set_plot_params","text":"<pre><code>set_plot_params(\n    *,\n    ticks_interval: int | None = 10,\n    x_unit_size: float = 0.14,\n    y_unit_size: float = 0.2,\n    grid_color: str = \"lightgrey\",\n    show_consensus_char: bool = True,\n    identity_color: str = \"#A3A5FF\",\n    identity_color_min_thr: float = 30\n) -&gt; None\n</code></pre> <p>Set plot parameters to adjust figure appearence in detail</p> PARAMETER DESCRIPTION <code>ticks_interval</code> <p>Ticks interval. If None, ticks interval is not displayed.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>10</code> </p> <code>x_unit_size</code> <p>X-axis unit size of seq char rectangle</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.14</code> </p> <code>y_unit_size</code> <p>Y-axis unit size of seq char rectangle</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>grid_color</code> <p>Grid color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'lightgrey'</code> </p> <code>show_consensus_char</code> <p>If True, show consensus character</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>identity_color</code> <p>Base color for <code>Identity</code> color scheme</p> <p> TYPE: <code>str</code> DEFAULT: <code>'#A3A5FF'</code> </p> <code>identity_color_min_thr</code> <p>Min identity color threshold for <code>Identity</code> color scheme</p> <p> TYPE: <code>float</code> DEFAULT: <code>30</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.set_custom_color_scheme","title":"set_custom_color_scheme","text":"<pre><code>set_custom_color_scheme(color_scheme: dict[str, str]) -&gt; None\n</code></pre> <p>Set user-defined custom color scheme (Overwrite color scheme setting)</p> PARAMETER DESCRIPTION <code>color_scheme</code> <p>Custom color scheme dict (e.g. <code>{\"A\": \"red\", \"R\": \"#F01505\", ...}</code>)</p> <p> TYPE: <code>dict[str, str]</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.set_custom_color_func","title":"set_custom_color_func","text":"<pre><code>set_custom_color_func(custom_color_func: Callable[[int, int, str, MSA], str | None])\n</code></pre> <p>Set user-defined custom color func (Overwrite all other color setting)</p> <p>User can change the color of each residue specified by the row and column position of the MSA.</p> PARAMETER DESCRIPTION <code>custom_color_func</code> <p>Custom color function. <code>Callable[[int, int, str, MSA], str | None]</code> means <code>Callable[[row_pos, col_pos, seq_char, msa], hexcolor | None]</code></p> <p> TYPE: <code>Callable[[int, int, str, MultipleSeqAlignment], str | None]</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.set_highlight_pos","title":"set_highlight_pos","text":"<pre><code>set_highlight_pos(positions: list[tuple[int, int] | int]) -&gt; None\n</code></pre> <p>Set user-defined highlight MSA positions</p> PARAMETER DESCRIPTION <code>positions</code> <p>Highlight positions. int and tuple range mixture positions can be specified. (e.g. If <code>[1, 5, (10, 13), 18]</code> is set, <code>1, 5, 10, 11, 12, 13, 18</code> positions are highlighted)</p> <p> TYPE: <code>list[tuple[int, int] | int]</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.set_highlight_pos_by_ident_thr","title":"set_highlight_pos_by_ident_thr","text":"<pre><code>set_highlight_pos_by_ident_thr(min_thr: float = 0, max_thr: float = 100) -&gt; None\n</code></pre> <p>Set highlight MSA positions by consensus identity threshold</p> PARAMETER DESCRIPTION <code>min_thr</code> <p>Min identity threshold for highlight position selection</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>max_thr</code> <p>Max identity threshold for highlight position selection</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.add_markers","title":"add_markers","text":"<pre><code>add_markers(\n    positions: list[tuple[int, int] | int],\n    marker: str = \"v\",\n    color: str = \"black\",\n    size: float = 6,\n) -&gt; None\n</code></pre> <p>Add markers on specified positions</p> PARAMETER DESCRIPTION <code>positions</code> <p>Marker positions. int and tuple range mixture positions can be specified. (e.g. If <code>[1, 5, (10, 13), 18]</code> is set, markers are plotted on <code>1, 5, 10, 11, 12, 13, 18</code> positions)</p> <p> TYPE: <code>list[tuple[int, int] | int]</code> </p> <code>marker</code> <p>Marker type of matplotlib. See https://matplotlib.org/stable/api/markers_api.html for details.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'v'</code> </p> <code>color</code> <p>Marker color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>size</code> <p>Marker size</p> <p> TYPE: <code>float</code> DEFAULT: <code>6</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.add_text_annotation","title":"add_text_annotation","text":"<pre><code>add_text_annotation(\n    range: tuple[int, int],\n    text: str,\n    *,\n    text_color: str = \"black\",\n    text_size: float = 10,\n    range_color: str = \"black\"\n) -&gt; None\n</code></pre> <p>Add text annotation in specified range</p> PARAMETER DESCRIPTION <code>range</code> <p>Annotation start-end range tuple</p> <p> TYPE: <code>tuple[int, int]</code> </p> <code>text</code> <p>Annotation text</p> <p> TYPE: <code>str</code> </p> <code>text_color</code> <p>Text color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>text_size</code> <p>Text size</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>range_color</code> <p>Annotation range line color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.plotfig","title":"plotfig","text":"<pre><code>plotfig(dpi: int = 100) -&gt; Figure\n</code></pre> <p>Plot figure</p> PARAMETER DESCRIPTION <code>dpi</code> <p>Figure DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> RETURNS DESCRIPTION <code>fig</code> <p>Figure</p> <p> TYPE: <code>Figure</code> </p>"},{"location":"api-docs/msaviz/#pymsaviz.msaviz.MsaViz.savefig","title":"savefig","text":"<pre><code>savefig(savefile: str | Path, dpi: int = 100, pad_inches: float = 0.5) -&gt; None\n</code></pre> <p>Save figure to file</p> PARAMETER DESCRIPTION <code>savefile</code> <p>Save file</p> <p> TYPE: <code>str | Path</code> </p> <code>dpi</code> <p>DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>pad_inches</code> <p>Padding inches</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p>"},{"location":"cli-docs/pymsaviz/","title":"pymsaviz CLI Document","text":""},{"location":"cli-docs/pymsaviz/#usage","title":"Usage","text":""},{"location":"cli-docs/pymsaviz/#basic-command","title":"Basic Command","text":"<pre><code>pymsaviz -i [MSA file] -o [MSA visualization file]\n</code></pre>"},{"location":"cli-docs/pymsaviz/#options","title":"Options","text":"<pre><code>$ pymsaviz --help\nusage: pymsaviz [options] -i msa.fa -o msa_viz.png\n\nMSA(Multiple Sequence Alignment) visualization CLI tool\n\noptional arguments:\n  -i I, --infile I    Input MSA file\n  -o O, --outfile O   Output MSA visualization file (*.png|*.jpg|*.svg|*.pdf)\n  --format            MSA file format (Default: 'fasta')\n  --color_scheme      Color scheme (Default: 'Zappo')\n  --start             Start position of MSA visualization (Default: 1)\n  --end               End position of MSA visualization (Default: 'MSA Length')\n  --wrap_length       Wrap length (Default: None)\n  --wrap_space_size   Space size between wrap MSA plot area (Default: 3.0)\n  --label_type        Label type ('id'[default]|'description')\n  --show_grid         Show grid (Default: OFF)\n  --show_count        Show seq char count without gap on right side (Default: OFF)\n  --show_consensus    Show consensus sequence (Default: OFF)\n  --consensus_color   Consensus identity bar color (Default: '#1f77b4')\n  --consensus_size    Consensus identity bar height size (Default: 2.0)\n  --sort              Sort MSA order by NJ tree constructed from MSA distance matrix (Default: OFF)\n  --dpi               Figure DPI (Default: 300)\n  -v, --version       Print version information\n  -h, --help          Show this help message and exit\n\nAvailable Color Schemes:\n['Clustal', 'Zappo', 'Taylor', 'Flower', 'Blossom', 'Sunset', 'Ocean', 'Hydrophobicity', 'HelixPropensity', 'StrandPropensity', 'TurnPropensity', 'BuriedIndex', 'Nucleotide', 'Purine/Pyrimidine', 'Identity', 'None']\n</code></pre>"},{"location":"cli-docs/pymsaviz/#example-command","title":"Example Command","text":"<p>Click here to download example MSA files.  </p>"},{"location":"cli-docs/pymsaviz/#example-1","title":"Example 1","text":"<pre><code>pymsaviz -i ./example/HIGD2A.fa -o cli_example01.png --color_scheme Identity\n</code></pre>"},{"location":"cli-docs/pymsaviz/#example-2","title":"Example 2","text":"<pre><code>pymsaviz -i ./example/MRGPRG.fa -o cli_example02.png --wrap_length 80 \\\n         --color_scheme Taylor --show_consensus --show_count\n</code></pre>"},{"location":"cli-docs/pymsaviz/#example-3","title":"Example 3","text":"<pre><code>pymsaviz -i ./example/MRGPRG.fa -o cli_example03.png --start 100 --end 160 \\\n         --color_scheme Flower --show_grid --show_consensus --consensus_color tomato\n</code></pre>"}]}